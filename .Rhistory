data_melted <- melt(data, id.vars = 'Item')
# Generate heatmap
ggplot(data_melted, aes(x = Item, y = variable, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "red") +
labs(title = "Heatmap of Values", x = "Item", y = "Variable") +
theme_minimal()
# Create a sample dataset
data <- data.frame(
Item = paste("Item", 1:10),
Value = seq(10, 100, by = 10)
)
# Melt the data for ggplot
data_melted <- melt(data, id.vars = 'Item')
# Generate heatmap
ggplot(data_melted, aes(x = Item, y = variable, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "red") +
labs(title = "Heatmap of Values", x = "Item", y = "Variable") +
theme_minimal()
# Generate heatmap
ggplot(data_melted, aes(x = Item, y = variable, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "red") +
labs(title = "Heatmap of Values", x = "Item", y = "Variable") +
theme_minimal()
# Create a sample dataset
data <- data.frame(
Item = paste("Item", 1:10),
Value = seq(10, 100, by = 10)
)
# Create a sample dataset
data <- data.frame(
Item = paste("Item", 1:10),
Value = seq(10, 200, by = 10)
)
# Create a sample dataset
data <- data.frame(
Item = paste("Item", 1:10),
Value = seq(10, 200, by = 10)
)
# Melt the data for ggplot
data_melted <- melt(data, id.vars = 'Item')
# Create a sample dataset
data <- data.frame(
Item = paste("Item", 1:10),
Value = seq(10, 200, by = 10)
)
# Load necessary libraries
library(ggplot2)
# Create a sample dataset
data <- data.frame(
Item = paste("Item", 1:10),
Value = seq(10, 200, by = 10)
)
# Melt the data for ggplot
data_melted <- melt(data, id.vars = 'Item')
# Create a sample dataset
data <- data.frame(
Item = paste("Item", 1:10),
Value = seq(10, 200, by = 10)
)
################################################################################
##                          HOMEWORK ASSIGNMENT 2                             ##
################################################################################
# This homework assignment is to test your knowledge on Database design
################################################################################
##                           my_company database                                  ##
################################################################################
options(warn=-1) # R function to turn off warnings
library(sqldf)
# Please note that it is required to checkin with the instructor in Week 3-4 to ensure
# you are on the correct path to submit Assignment 2
# Please see the instructions for checkin on D2L
# This script is based on the new e-commerce company you want to start!
# Use the caselet description from Assignment 1 and questions from Assignment 2 (on D2L)
# to write queries using SQL
################################################################################
#                            Step 1: CREATE DATABASE
################################################################################
# Step 1: Create a new database in SQL (using R). Name the database as my_companydb.sqlite.
# Use dbConnect() to create a new database connection
# syntax: db <- dbconnect(SQLite(), dbname = "<databasename>.sqlite")
db <- dbConnect(SQLite(), dbname="next-ecommdb") # fill in the missing second argument
################################################################################
#                            Step 2: CREATE TABLES
################################################################################
# Step 2: Create all the tables in your relational database using CREATE
# TABLE statement. Include all the constraints included in the relational schema.
# Next, specify your table name, i.e., CUSTOMER, PRODUCT, CUSTOMER_PRODUCT, PURCHASE, CONTAINS
# CONTAINS table is the table for M:N relationship between PRODUCT and PURCHASE
# CUSTOMER_PRODUCT table is for multi-value attribute {customer_id} in PRODUCT table
############################# CREATE TABLE STATEMENTS ###########################
# Syntax: CREATE TABLE <TABLE NAME>
#            (<column name 1> <datatype> <constraint1> <constraint2>,
#             <column name 2> <datatype> <constraint3>,
#             <column name 3> <datatype> <constraint4>)
# ****************************** Q1: CUSTOMER table ****************************
# Start with CUSTOMER table, as it has no foreign key
# CUSTOMER table has customer_id (INTEGER), name (TEXT), age (INTEGER), gender
#   (TEXT) and zipcode (INTEGER) as its columns
# Note the following constraints-
# 1. Primary key for CUSTOMER table is customer_id
# 2. Default value for age is 99
# 3. Name and zipcode are not null
sqldf("
CREATE TABLE CUSTOMER (
customer_id INTEGER PRIMARY KEY,
name TEXT NOT NULL,
age INTEGER DEFAULT 99,
gender TEXT,
zipcode INTEGER NOT NULL
);
",dbname="next-ecommdb.sqlite")
# ****************************** Q2: PRODUCT table *****************************
# Now, let's create PRODUCT table
# PRODUCT table has product_id (INTEGER), product_name (TEXT) and price (REAL) as its columns
# Note the following constraints-
# 1. Primary key for PRODUCT table is product_id
# 2. Product_name and price cannot be null
sqldf("
CREATE TABLE PRODUCT (
product_id INTEGER PRIMARY KEY,
product_name TEXT NOT NULL,
price REAL NOT NULL
);
",dbname="next-ecommdb.sqlite")
# ****************************** Q3: CUSTOMER_PRODUCT table ********************
# Now, let's create CUSTOMER_PRODUCT table which references customer_id and product_id
# from CUSTOMER and PRODUCT tables respectively
# CUSTOMER_PRODUCT table has product_id (INTEGER), customer_id (INTEGER) as its columns
# Note the following constraints-
# 1. Primary key for CUSTOMER_PRODUCT table is product_id, customer_id
# 2. product_id is a foreign key, which references product_id of PRODUCT table
# 3. customer_id is a foreign key, which references customer_id of CUSTOMER table
# Syntax for foreign key : <column name> <datatype> REFERENCES <TABLE NAME>(<column name>)
sqldf("
CREATE TABLE CUSTOMER_PRODUCT (
product_id INTEGER,
customer_id INTEGER,
PRIMARY KEY (product_id, customer_id),
FOREIGN KEY (product_id) REFERENCES PRODUCT(product_id),
FOREIGN KEY (customer_id) REFERENCES CUSTOMER(customer_id)
);
",dbname="next-ecommdb.sqlite")
# ****************************** Q4: PURCHASE table ************************
# Now, let's create PURCHASE table which references customer_id and product_id
# from CUSTOMER and PRODUCT table respectively
#
#
# PURCHASE table has purchase_id (INTEGER), customer_id (INTEGER), product_id (INTEGER),
#  date_of_purchase (TEXT) and if_returned (TEXT) as its columns
# Note the following constraints-
# 1. Primary key for PURCHASE table is purchase_id
# 2. customer_id and product_id cannot be null
# 3. customer_id is a foreign key, which references customer_id of CUSTOMER table
# 4. product_id is a foreign key, which references product_id of PRODUCT table
# 5. Default value for if_returned is 'N';
sqldf("
CREATE TABLE PURCHASE (
purchase_id INTEGER PRIMARY KEY,
customer_id INTEGER NOT NULL,
product_id INTEGER NOT NULL,
date_of_purchase TEXT,
if_returned TEXT DEFAULT 'N',
FOREIGN KEY (customer_id) REFERENCES CUSTOMER(customer_id),
FOREIGN KEY (product_id) REFERENCES PRODUCT(product_id)
);
",dbname="next-ecommdb.sqlite")
# ****************************** Q5: CONTAINS table ****************************
# Last, let's create the CONTAINS table that references purchase_id and product_id table
# CONTAINS table has contains_id (INTEGER), purchase_id (INTEGER), and product_id (INTEGER) as is columns
# Note the following constraints
# 1. Primary key for CONTAINS table is contains_id
# 2. purchase_id and product_id cannot be null
# 3. purchase_id is a foreign key, which references purchase_id of PURCHASE table
# 4. product_id is a foreign key, which references product_id of PRODUCT table
sqldf("
CREATE TABLE CONTAINS (
contains_id INTEGER PRIMARY KEY,
purchase_id INTEGER NOT NULL,
product_id INTEGER NOT NULL,
FOREIGN KEY (purchase_id) REFERENCES PURCHASE(purchase_id),
FOREIGN KEY (product_id) REFERENCES PRODUCT(product_id)
);
",dbname="next-ecommdb.sqlite")
############################ Q6: VERIFYING RELATIONAL SCHEMA ###################
# Let's verify the structure of the database my_company
# fill in the missing part of the statement
# Syntax: pragma table_info(<TABLE NAME>)
# CUSTOMER table
sqldf("pragma table_info(CUSTOMER)",dbname="next-ecommdb.sqlite")
# PRODUCT table
sqldf("pragma table_info(PRODUCT)",dbname="next-ecommdb.sqlite")
# CUSTOMER_PRODUCT table
sqldf("pragma table_info(CUSTOMER_PRODUCT)",dbname="next-ecommdb.sqlite")
# PURCHASE table
sqldf("pragma table_info(PURCHASE)",dbname="next-ecommdb.sqlite")
# CONTAINS table
sqldf("pragma table_info(CONTAINS)",dbname="next-ecommdb.sqlite")
################################################################################
#                            Step 3: INSERT DATA
################################################################################
# After creating a relational DB and tables, we are ready to insert data into our
# database
# To insert data into the tables use INSERT INTO statement
# Syntax: INSERT INTO <table name> VALUES (<value 1>,<value 2>,<value 3>...)
# ****************************** Q7: CUSTOMER table *****************************
# Let's insert values into CUSTOMER TABLE
# use INSERT INTO statement for inserting following two rows
# 1,'Mary',28, 'F',60208
# 2,'Liz', 18, 'F',60201
sqldf(c(
"INSERT INTO CUSTOMER VALUES (1, 'Mary', 28, 'F', 60208);",
"INSERT INTO CUSTOMER VALUES (2, 'Liz', 18, 'F', 60201);"
),
dbname="next-ecommdb.sqlite")
################################################################################
##                          HOMEWORK ASSIGNMENT 2                             ##
################################################################################
# This homework assignment is to test your knowledge on Database design
################################################################################
##                           my_company database                                  ##
################################################################################
options(warn=-1) # R function to turn off warnings
library(sqldf)
# Please note that it is required to checkin with the instructor in Week 3-4 to ensure
# you are on the correct path to submit Assignment 2
# Please see the instructions for checkin on D2L
# This script is based on the new e-commerce company you want to start!
# Use the caselet description from Assignment 1 and questions from Assignment 2 (on D2L)
# to write queries using SQL
################################################################################
#                            Step 1: CREATE DATABASE
################################################################################
# Step 1: Create a new database in SQL (using R). Name the database as my_companydb.sqlite.
# Use dbConnect() to create a new database connection
# syntax: db <- dbconnect(SQLite(), dbname = "<databasename>.sqlite")
db <- dbConnect(SQLite(), dbname="next-ecommdb.sqlite") # fill in the missing second argument
################################################################################
#                            Step 2: CREATE TABLES
################################################################################
# Step 2: Create all the tables in your relational database using CREATE
# TABLE statement. Include all the constraints included in the relational schema.
# Next, specify your table name, i.e., CUSTOMER, PRODUCT, CUSTOMER_PRODUCT, PURCHASE, CONTAINS
# CONTAINS table is the table for M:N relationship between PRODUCT and PURCHASE
# CUSTOMER_PRODUCT table is for multi-value attribute {customer_id} in PRODUCT table
############################# CREATE TABLE STATEMENTS ###########################
# Syntax: CREATE TABLE <TABLE NAME>
#            (<column name 1> <datatype> <constraint1> <constraint2>,
#             <column name 2> <datatype> <constraint3>,
#             <column name 3> <datatype> <constraint4>)
# ****************************** Q1: CUSTOMER table ****************************
# Start with CUSTOMER table, as it has no foreign key
# CUSTOMER table has customer_id (INTEGER), name (TEXT), age (INTEGER), gender
#   (TEXT) and zipcode (INTEGER) as its columns
# Note the following constraints-
# 1. Primary key for CUSTOMER table is customer_id
# 2. Default value for age is 99
# 3. Name and zipcode are not null
sqldf("
CREATE TABLE CUSTOMER (
customer_id INTEGER PRIMARY KEY,
name TEXT NOT NULL,
age INTEGER DEFAULT 99,
gender TEXT,
zipcode INTEGER NOT NULL
);
",dbname="next-ecommdb.sqlite")
# ****************************** Q2: PRODUCT table *****************************
# Now, let's create PRODUCT table
# PRODUCT table has product_id (INTEGER), product_name (TEXT) and price (REAL) as its columns
# Note the following constraints-
# 1. Primary key for PRODUCT table is product_id
# 2. Product_name and price cannot be null
sqldf("
CREATE TABLE PRODUCT (
product_id INTEGER PRIMARY KEY,
product_name TEXT NOT NULL,
price REAL NOT NULL
);
",dbname="next-ecommdb.sqlite")
# ****************************** Q3: CUSTOMER_PRODUCT table ********************
# Now, let's create CUSTOMER_PRODUCT table which references customer_id and product_id
# from CUSTOMER and PRODUCT tables respectively
# CUSTOMER_PRODUCT table has product_id (INTEGER), customer_id (INTEGER) as its columns
# Note the following constraints-
# 1. Primary key for CUSTOMER_PRODUCT table is product_id, customer_id
# 2. product_id is a foreign key, which references product_id of PRODUCT table
# 3. customer_id is a foreign key, which references customer_id of CUSTOMER table
# Syntax for foreign key : <column name> <datatype> REFERENCES <TABLE NAME>(<column name>)
sqldf("
CREATE TABLE CUSTOMER_PRODUCT (
product_id INTEGER,
customer_id INTEGER,
PRIMARY KEY (product_id, customer_id),
FOREIGN KEY (product_id) REFERENCES PRODUCT(product_id),
FOREIGN KEY (customer_id) REFERENCES CUSTOMER(customer_id)
);
",dbname="next-ecommdb.sqlite")
# ****************************** Q4: PURCHASE table ************************
# Now, let's create PURCHASE table which references customer_id and product_id
# from CUSTOMER and PRODUCT table respectively
#
#
# PURCHASE table has purchase_id (INTEGER), customer_id (INTEGER), product_id (INTEGER),
#  date_of_purchase (TEXT) and if_returned (TEXT) as its columns
# Note the following constraints-
# 1. Primary key for PURCHASE table is purchase_id
# 2. customer_id and product_id cannot be null
# 3. customer_id is a foreign key, which references customer_id of CUSTOMER table
# 4. product_id is a foreign key, which references product_id of PRODUCT table
# 5. Default value for if_returned is 'N';
sqldf("
CREATE TABLE PURCHASE (
purchase_id INTEGER PRIMARY KEY,
customer_id INTEGER NOT NULL,
product_id INTEGER NOT NULL,
date_of_purchase TEXT,
if_returned TEXT DEFAULT 'N',
FOREIGN KEY (customer_id) REFERENCES CUSTOMER(customer_id),
FOREIGN KEY (product_id) REFERENCES PRODUCT(product_id)
);
",dbname="next-ecommdb.sqlite")
# ****************************** Q5: CONTAINS table ****************************
# Last, let's create the CONTAINS table that references purchase_id and product_id table
# CONTAINS table has contains_id (INTEGER), purchase_id (INTEGER), and product_id (INTEGER) as is columns
# Note the following constraints
# 1. Primary key for CONTAINS table is contains_id
# 2. purchase_id and product_id cannot be null
# 3. purchase_id is a foreign key, which references purchase_id of PURCHASE table
# 4. product_id is a foreign key, which references product_id of PRODUCT table
sqldf("
CREATE TABLE CONTAINS (
contains_id INTEGER PRIMARY KEY,
purchase_id INTEGER NOT NULL,
product_id INTEGER NOT NULL,
FOREIGN KEY (purchase_id) REFERENCES PURCHASE(purchase_id),
FOREIGN KEY (product_id) REFERENCES PRODUCT(product_id)
);
",dbname="next-ecommdb.sqlite")
############################ Q6: VERIFYING RELATIONAL SCHEMA ###################
# Let's verify the structure of the database my_company
# fill in the missing part of the statement
# Syntax: pragma table_info(<TABLE NAME>)
# CUSTOMER table
sqldf("pragma table_info(CUSTOMER)",dbname="next-ecommdb.sqlite")
# PRODUCT table
sqldf("pragma table_info(PRODUCT)",dbname="next-ecommdb.sqlite")
# CUSTOMER_PRODUCT table
sqldf("pragma table_info(CUSTOMER_PRODUCT)",dbname="next-ecommdb.sqlite")
# PURCHASE table
sqldf("pragma table_info(PURCHASE)",dbname="next-ecommdb.sqlite")
# CONTAINS table
sqldf("pragma table_info(CONTAINS)",dbname="next-ecommdb.sqlite")
################################################################################
#                            Step 3: INSERT DATA
################################################################################
# After creating a relational DB and tables, we are ready to insert data into our
# database
# To insert data into the tables use INSERT INTO statement
# Syntax: INSERT INTO <table name> VALUES (<value 1>,<value 2>,<value 3>...)
# ****************************** Q7: CUSTOMER table *****************************
# Let's insert values into CUSTOMER TABLE
# use INSERT INTO statement for inserting following two rows
# 1,'Mary',28, 'F',60208
# 2,'Liz', 18, 'F',60201
sqldf(c(
"INSERT INTO CUSTOMER VALUES (1, 'Mary', 28, 'F', 60208);",
"INSERT INTO CUSTOMER VALUES (2, 'Liz', 18, 'F', 60201);"
),
dbname="next-ecommdb.sqlite")
sqldf("SELECT * FROM CUSTOMER",
dbname="next-ecommdb.sqlite")
# ****************************** Q8: PRODUCT table *****************************
# Let's insert values into PRODUCT TABLE
# use INSERT INTO statement for inserting following two rows
# 1,'product_1',15
# 2,'product_2',2
sqldf(c(
"INSERT INTO PRODUCT VALUES (1, 'product_1', 15);
INSERT INTO PRODUCT VALUES (2, 'product_2', 2);"
),
dbname="next-ecommdb.sqlite")
sqldf("SELECT * FROM PRODUCT",
dbname="next-ecommdb.sqlite")
# ****************************** Q9: CUSTOMER_PRODUCT table ********************
# Let's insert values into CUSTOMER_PRODUCT TABLE
# use INSERT INTO statement for inserting following three rows
# 1,1
# 2,1
# 2,2
sqldf(c("PRAGMA foreign_keys=on",
"INSERT INTO CUSTOMER_PRODUCT VALUES (1, 1);",
"INSERT INTO CUSTOMER_PRODUCT VALUES (2, 1);",
"INSERT INTO CUSTOMER_PRODUCT VALUES (2, 2);"
),
dbname="next-ecommdb.sqlite")
View(db)
sqldf("SELECT * FROM CUSTOMER", dbname="next-ecommdb.sqlite")
sqldf("SELECT * FROM PRODUCT", dbname="next-ecommdb.sqlite")
sqldf(c(
"INSERT INTO PRODUCT VALUES (1, 'product_1', 15);",
"INSERT INTO PRODUCT VALUES (2, 'product_2', 2);"
),
dbname="next-ecommdb.sqlite")
sqldf(c(
"INSERT INTO PRODUCT VALUES (2, 'product_2', 2);"
),
dbname="next-ecommdb.sqlite")
sqldf("SELECT * FROM PRODUCT",
dbname="next-ecommdb.sqlite")
################################################################################
##                          HOMEWORK ASSIGNMENT 2                             ##
################################################################################
# This homework assignment is to test your knowledge on Database design
################################################################################
##                           my_company database                                  ##
################################################################################
options(warn=-1) # R function to turn off warnings
library(sqldf)
# Please note that it is required to checkin with the instructor in Week 3-4 to ensure
# you are on the correct path to submit Assignment 2
# Please see the instructions for checkin on D2L
# This script is based on the new e-commerce company you want to start!
# Use the caselet description from Assignment 1 and questions from Assignment 2 (on D2L)
# to write queries using SQL
################################################################################
#                            Step 1: CREATE DATABASE
################################################################################
# Step 1: Create a new database in SQL (using R). Name the database as my_companydb.sqlite.
# Use dbConnect() to create a new database connection
# syntax: db <- dbconnect(SQLite(), dbname = "<databasename>.sqlite")
db <- dbConnect(SQLite(), dbname="next-ecommdb.sqlite") # fill in the missing second argument
################################################################################
#                            Step 2: CREATE TABLES
################################################################################
# Step 2: Create all the tables in your relational database using CREATE
# TABLE statement. Include all the constraints included in the relational schema.
# Next, specify your table name, i.e., CUSTOMER, PRODUCT, CUSTOMER_PRODUCT, PURCHASE, CONTAINS
# CONTAINS table is the table for M:N relationship between PRODUCT and PURCHASE
# CUSTOMER_PRODUCT table is for multi-value attribute {customer_id} in PRODUCT table
############################# CREATE TABLE STATEMENTS ###########################
# Syntax: CREATE TABLE <TABLE NAME>
#            (<column name 1> <datatype> <constraint1> <constraint2>,
#             <column name 2> <datatype> <constraint3>,
#             <column name 3> <datatype> <constraint4>)
# ****************************** Q1: CUSTOMER table ****************************
# Start with CUSTOMER table, as it has no foreign key
# CUSTOMER table has customer_id (INTEGER), name (TEXT), age (INTEGER), gender
#   (TEXT) and zipcode (INTEGER) as its columns
# Note the following constraints-
# 1. Primary key for CUSTOMER table is customer_id
# 2. Default value for age is 99
# 3. Name and zipcode are not null
sqldf("
CREATE TABLE CUSTOMER (
customer_id INTEGER PRIMARY KEY,
name TEXT NOT NULL,
age INTEGER DEFAULT 99,
gender TEXT,
zipcode INTEGER NOT NULL
);
",dbname="next-ecommdb.sqlite")
# ****************************** Q10: PURCHASE table ***********************
# Let's insert values into PURCHASE TABLE
# use INSERT INTO statement for inserting following three rows
# 1,1,1,'2024/01/01','N'
# 2,1,2,'2018/12/10','N'
# 3,2,2,'2018/11/11','N'
sqldf(c("PRAGMA foreign_keys=on",
"INSERT INTO PURCHASE VALUES (1, 1, 1, '2024/01/01', 'N');",
"INSERT INTO PURCHASE VALUES (2, 1, 2, '2018/12/10', 'N');",
"INSERT INTO PURCHASE VALUES (3, 2, 2, '2018/11/11', 'N');"
),
dbname="next-ecommdb.sqlite")
sqldf("SELECT * FROM PURCHASE",
dbname="next-ecommdb.sqlite")
# ****************************** Q11: CONTAINS table ***************************
# Let's insert values into CONTAINS TABLE
# use INSERT INTO statement for inserting following three rows
# 1,1,1
# 2,2,2
# 3,3,2
sqldf(c("PRAGMA foreign_keys=on",
"INSERT INTO CONTAINS VALUES (1, 1, 1);",
"INSERT INTO CONTAINS VALUES (2, 2, 2);",
"INSERT INTO CONTAINS VALUES (3, 3, 2);"
),
dbname="next-ecommdb.sqlite")
sqldf("SELECT * FROM CONTAINS",
dbname="next-ecommdb.sqlite")
################################################################################
# Please submit your R script on D2L once you have completed the assignment
################################################################################
install.packages("gapminder", repos = "http://cran.rstudio.com")
install.packages("ggplot2")
install.packages("dplyr")     # For data filtering
install.packages("scales")    # For better formatting
install.packages("knitr")
Sys.which("make")
Sys.setenv(RTOOLS45_HOME = "C:/rtools45")
writeLines('PATH="${RTOOLS45_HOME}/usr/bin;${PATH}"', con = file.path(Sys.getenv("HOME"), ".Renviron"))
Sys.which("make")
pkgbuild::has_rtools()
pkgbuild::has_rtools()
install.packages("knitr")
library(shiny); runApp('C:/Users/jibar/Documents_/Clients/Noha/MHI 5250 Final Project/BCWisDatasetCode.R')
library(shiny); runApp('C:/Users/jibar/Documents_/Clients/Noha/MHI 5250 Final Project/BCWisDatasetCode.R')
runApp('C:/Users/jibar/Documents_/Clients/Noha/MHI 5250 Final Project/BCWisDatasetCode.R')
library(shiny); runApp('C:/Users/jibar/Documents_/Clients/Noha/MHI 5250 Final Project/BCWisDatasetCode.R')
install.packages("shinydashboard")
